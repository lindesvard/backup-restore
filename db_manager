#!/bin/bash

# Configuration
# Load environment variables from .env file
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
else
    echo "Error: .env file not found in the current directory."
    exit 1
fi

# Use environment variables
AWS_BUCKET_NAME="${AWS_BUCKET_NAME}"
AWS_BUCKET_PATH="${AWS_BUCKET_PATH}/postgres"
BACKUP_DIR="${BACKUP_DIR:-backups}"

# Function to get container ID from name
get_container_id() {
    local container_name="$1"
    local container_id=$(docker ps -qf "name=^/${container_name}$")
    if [ -z "$container_id" ]; then
        echo "Error: No running container found with name $container_name" >&2
        exit 1
    fi
    echo "$container_id"
}

# Function to backup database
backup_database() {
    local container_name="$1"
    local container_id=$(get_container_id "$container_name")
    local timestamp=$(date '+%Y-%m-%d-%H-%M')
    local filename="pg_dump_${timestamp}.sql"
    local backup_file="${BACKUP_DIR}/${filename}"

    echo "Backing up database from container: $container_name (ID: $container_id)"
    docker exec -t $container_id pg_dumpall -c -U postgres > "$backup_file"
    
    if [ $? -eq 0 ]; then
        echo "Backup created successfully: $backup_file"
        push_to_s3 "$backup_file" "$filename"
    else
        echo "Backup failed"
        exit 1
    fi
}

# Function to push backup to S3
push_to_s3() {
    local local_file="$1"
    local s3_file="$2"
    echo "Pushing $local_file to S3 bucket: $AWS_BUCKET_NAME/$AWS_BUCKET_PATH/$s3_file"
    aws s3 cp "$local_file" "s3://$AWS_BUCKET_NAME/$AWS_BUCKET_PATH/$s3_file"
    
    if [ $? -eq 0 ]; then
        echo "File uploaded successfully to S3"
    else
        echo "S3 upload failed"
        exit 1
    fi
}

# Function to prepare dump files for specific database
prepare_dump_files() {
    local input_file="$1"
    local prep_file="$2"
    local data_file="$3"
    local db_name="$4"

    echo "Preparing dump files for database: $db_name"

    # Create the preparatory commands file
    cat << EOF > "$prep_file"
\\c template1;

-- Terminate existing connections
SELECT pg_terminate_backend(pid) 
FROM pg_stat_activity 
WHERE datname = '$db_name' 
  AND pid <> pg_backend_pid();

-- Drop and recreate the database
DROP DATABASE IF EXISTS $db_name;
CREATE DATABASE $db_name;

-- Connect to the new database
\\c $db_name;
EOF

    echo "Preparatory commands file created: $prep_file"

    # Extract only the specific database content to the data file
    sed -n "/connect.*$db_name/,/PostgreSQL database dump complete/p" "$input_file" | sed '$d' > "$data_file"

    echo "Database-specific dump file created: $data_file"
}

# Function to restore database
restore_database() {
    local container_name="$1"
    local container_id=$(get_container_id "$container_name")
    local backup_file="$2"
    local db_name="$3"

    # Check if the backup file exists and has content
    if [ ! -f "$backup_file" ]; then
        echo "Error: Backup file '$backup_file' does not exist."
        exit 1
    fi

    if [ ! -s "$backup_file" ]; then
        echo "Error: Backup file '$backup_file' is empty."
        exit 1
    fi

    # Check if the database name exists in the backup file
    if ! grep -q "\\connect.*$db_name" "$backup_file"; then
        echo "Error: Database '$db_name' not found in the backup file."
        exit 1
    fi

    echo "Backup file validated successfully."

    echo ""
    echo "========================================================"
    echo ""
    echo "WARNING: You are about to restore the database '$db_name' in container '$container_name'."
    echo ""
    echo "Container details:"
    docker ps --filter "name=$container_name" --format "{{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"
    echo ""
    echo "This action will overwrite the existing database if it exists."
    echo ""
    read -p "Are you sure you want to proceed? (yes/no): " confirm

    if [[ $confirm != "yes" ]]; then
        echo "Database restoration cancelled."
        exit 0
    fi

    local prep_file="${BACKUP_DIR}/prep_commands_${db_name}.sql"
    local data_file="${BACKUP_DIR}/data_dump_${db_name}.sql"
    prepare_dump_files "$backup_file" "$prep_file" "$data_file" "$db_name"

    echo "Restoring database in container: $container_name (ID: $container_id)"
    
    # Execute preparatory commands
    cat "$prep_file" | docker exec -i $container_id psql -U postgres -f -

    # Restore the database content
    cat "$data_file" | docker exec -i $container_id psql -U postgres -d "$db_name" -f -

    if [ $? -eq 0 ]; then
        echo "Database restored successfully"
        rm "$prep_file" "$data_file"
    else
        echo "Restoration failed"
        rm "$prep_file" "$data_file"
        exit 1
    fi
}

# Function to download backup from S3
download_from_s3() {
    local s3_file="$1"
    local local_file="$2"
    echo "Downloading $s3_file from S3 bucket: $AWS_BUCKET_NAME/$AWS_BUCKET_PATH"
    aws s3 cp "s3://$AWS_BUCKET_NAME/$AWS_BUCKET_PATH/$s3_file" "$local_file"
    
    if [ $? -eq 0 ]; then
        echo "File downloaded successfully from S3"
    else
        echo "S3 download failed"
        exit 1
    fi
}

# Main execution
case "$1" in
    download)
        if [ -z "$2" ]; then
            echo "Usage: $0 download <s3_file>"
            exit 1
        fi
        local_file="${BACKUP_DIR}/$(basename "$2")"
        download_from_s3 "$(basename "$2")" "$local_file"
        ;;

    backup)
        if [ -z "$2" ]; then
            echo "Usage: $0 backup <container_name>"
            exit 1
        fi
        backup_database "$2"
        ;;
    restore)
        if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
            echo "Usage: $0 restore <container_name> <backup_file> <database_name>"
            exit 1
        fi
        if [[ "$3" == s3://* ]]; then
            local_file="${BACKUP_DIR}/$(basename "$3")"
            download_from_s3 "$(basename "$3")" "$local_file"
            restore_database "$2" "$local_file" "$4"
        else
            restore_database "$2" "$3" "$4"
        fi
        ;;
    *)
        echo "Usage: $0 {backup|restore} ..."
        exit 1
        ;;
esac